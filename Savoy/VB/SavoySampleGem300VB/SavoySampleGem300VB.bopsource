/*************************************************
* Bop Definition File                            *
*     generated by Bop Studio                    *
*                                                *
*     at 2009/09/20 12:14:50.173                 *
*                                                *
* Copyright(C) 2006-2008 Jazz Soft, Inc.         *
* http://jazzsoft.net                            *
*************************************************/

class Misc
{
	ChangePCClock = No;
}

class CommunicationModel
{
	InitialState     = 1;
	ModelName        = "Savoy";
	SoftwareRevision = "1.00";
	EstablishCommunications = Yes;
}

class ControlModel
{
	InitialState        = 1;
	InitialOfflineState = 1;
	OfflineState        = 2;
	OnlineState         = 4;
}

class EventModel
{
	class VariableModel
	{
		VID[201] = (ECID, WORD, "0", "600", "30", "sec", "EC timer", "<u2 15>", 9);
		VID[202] = (ECID, WORD, "0", "1", "1", "", "Time format", "<u2 1>", 12);
		VID[203] = (SVID, WORD, "", "", "", "", "Control state", "<u2 4>", 16);

		// Load port state
		VID[301] = (SVID, WORD, "", "", "", "", "Load port state 1", "<u2 4>", 255);
		VID[302] = (SVID, WORD, "", "", "", "", "Load port state 2", "<u2 4>", 255);

		// Access mode
		VID[311] = (SVID, WORD, "", "", "", "", "Access mode 1", "<u2 4>", 255);
		VID[312] = (SVID, WORD, "", "", "", "", "Access mode 2", "<u2 4>", 255);

		// Slot map
		VID[321] = (DVID, ASCII, "", "", "", "", "Slot map 1", "<a'1111111111111111111111111'>", 255);
		VID[322] = (DVID, ASCII, "", "", "", "", "Slot map 2", "<a'1111111111111111111111111'>", 255);

		// Carrier ID
		VID[331] = (DVID, ASCII, "", "", "", "", "Carrier ID 1", "<a'1234567890'>", 255);
		VID[332] = (DVID, ASCII, "", "", "", "", "Carrier ID 2", "<a'ABCDEFGHIJ'>", 255);
	}

	class ReportModel
	{
		ReportID[2000] = ("Control state report", 203);

		// Port #1
		ReportID[1001] = ("Load port state report 1", 301);
		ReportID[1011] = ("Access mode report 1", 311);
		ReportID[1021] = ("Slot map report 1", 321);
		ReportID[1031] = ("Carrier ID report 1", 331);

		// Port #2
		ReportID[1002] = ("Load port state report 2", 302);
		ReportID[1012] = ("Access mode report 2", 312);
		ReportID[1022] = ("Slot map report 2", 322);
		ReportID[1032] = ("Carrier ID report 2", 332);
	}

	class CEIDModel
	{
		CEID[51] = (Disable, "offline", 0, 2000);
		CEID[52] = (Enable, "online local", 1, 2000);
		CEID[53] = (Enable, "online remote", 2, 2000);

		CEID[60] = (Enable, "Process job state", 255, 2000);
		CEID[70] = (Enable, "Control job state", 255, 2000);
		CEID[80] = (Enable, "Wafer process data", 255, 2000);

		// Carrier transfer request
		CEID[101] = (Enable, "Carrier transfer request 1", 255, 1001 & 1011 & 1031);
		CEID[102] = (Enable, "Carrier transfer request 2", 255, 1002 & 1012 & 1032);

		// Load port transfer
		CEID[111] = (Enable, "Load port transfer 1", 255, 1001 & 1011 & 1031);
		CEID[112] = (Enable, "Load port transfer 2", 255, 1002 & 1012 & 1032);

		// FOUP lock state
		CEID[121] = (Enable, "FOUP lock state 1", 255, 1001 & 1011 & 1031);
		CEID[122] = (Enable, "FOUP lock state 2", 255, 1002 & 1012 & 1032);

		// Carrier transfer
		CEID[131] = (Enable, "Carrier transfer 1", 255, 1001 & 1011 & 1031);
		CEID[132] = (Enable, "Carrier transfer 2", 255, 1002 & 1012 & 1032);

		// Carrier ID status
		CEID[141] = (Enable, "Carrier ID status 1", 255, 1001 & 1011 & 1031);
		CEID[142] = (Enable, "Carrier ID status 2", 255, 1002 & 1012 & 1032);

		// Carrier location
		CEID[151] = (Enable, "Carrier location 1", 255, 1001 & 1011 & 1031);
		CEID[152] = (Enable, "Carrier location 2", 255, 1002 & 1012 & 1032);

		// FOUP door state
		CEID[161] = (Enable, "FOUP door state 1", 255, 1001 & 1011 & 1031);
		CEID[162] = (Enable, "FOUP door state 2", 255, 1002 & 1012 & 1032);

		// Carrier slot map state
		CEID[171] = (Enable, "Carrier slot map state 1", 255, 1001 & 1011 & 1021);
		CEID[172] = (Enable, "Carrier slot map state 2", 255, 1002 & 1012 & 1022);

		// Access mode
		CEID[181] = (Enable, "Access mode 1", 255, 1001 & 1011 & 1031);
		CEID[182] = (Enable, "Access mode 2", 255, 1002 & 1012 & 1032);
	}
}

class AlarmModel
{
	ALID[1] = (Cleared, 0, Disable, "Load wafer failure");
}
